(()=>{var n={426:(n,t,e)=>{"use strict";e.d(t,{Z:()=>s});var r=e(537),o=e.n(r),i=e(645),a=e.n(i)()(o());a.push([n.id,"@import url(https://fonts.googleapis.com/css2?family=Cabin&display=swap);"]),a.push([n.id,'* {\n  margin: 0;\n  padding: 0;\n  text-decoration: none;\n  list-style: none;\n  box-sizing: border-box;\n}\n\n:root {\n  font-family: "Cabin", sans-serif;\n  font-size: 15px;\n  --primary: #bc8c4c;\n  --secondary: #e4c46c;\n  --tertiary: #672b15;\n}\n\nbody,\nhtml {\n  background-color: var(--secondary);\n  height: 100%;\n}\n\n/* !!!! Header !!!!*/\nheader {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  margin-bottom: 0.5rem;\n  text-align: center;\n}\nh1 {\n  border-bottom: 2px solid var(--tertiary);\n  width: fit-content;\n  display: inline-block;\n  color: var(--primary);\n  text-align: center;\n  letter-spacing: 0.15rem;\n  text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;\n}\n\n/* !!!! Main !!!!*/\nmain {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  align-items: center;\n  justify-items: center;\n}\n/*  Board */\n\n#board {\n  margin-top: 1.5rem;\n  grid-column: span 8;\n  width: 80vw;\n  height: 80vw;\n  display: grid;\n  grid-template-rows: repeat(8, 1fr);\n  border: 3px solid var(--tertiary);\n  box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.6),\n    -0.5rem -0.5rem 1rem rgba(0, 0, 0, 0.6);\n}\n\n.row {\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n}\n\n.board-square {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n}\n\n#board .row:nth-child(even) .board-square:nth-child(even) {\n  background-color: var(--secondary);\n  color: black;\n}\n\n#board .row:nth-child(odd) .board-square:nth-child(odd) {\n  background-color: var(--secondary);\n  color: black;\n}\n\n#board .row:nth-child(even) .board-square:nth-child(odd) {\n  background-color: var(--primary);\n  color: black;\n}\n\n#board .row:nth-child(odd) .board-square:nth-child(even) {\n  background-color: var(--primary);\n  color: black;\n}\n\n.board-icon {\n  width: 80%;\n  height: auto;\n}\n\n/*  Instructions/Result Display  */\n\n#instruction-result {\n  font-size: 1.1rem;\n  padding: 0.5rem 1rem;\n  grid-column: span 8;\n  grid-row: 1;\n  background-color: var(--primary);\n  border: 2px solid var(--tertiary);\n  border-radius: 1rem;\n  width: 85vw;\n}\n\n.hidden {\n  display: none;\n}\n\n/*  Game Buttons*/\n.game-buttons {\n  margin-top: 0.8rem;\n  grid-column: span 8;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n  text-align: center;\n  align-items: center;\n  justify-items: center;\n}\n\n.button {\n  width: 30vw;\n  padding: 0.3rem;\n  height: 100%;\n  font-size: 1rem;\n  background-color: var(--primary);\n  border: 2px solid var(--tertiary);\n  border-radius: 0.5rem;\n  transition: background-color 0.6s;\n  color: black;\n  box-shadow: 0.4rem 0.4rem.7rem rgba(0, 0, 0, 0.24);\n}\n\n.button:hover {\n  background-color: var(--secondary);\n  cursor: pointer;\n}\n\n.button:active {\n  transform: scale(0.98);\n}\n\n/*  Footer  */\n\nfooter {\n  margin-top: 1rem;\n  background-color: var(--tertiary);\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nfooter .footer-information {\n  font-size: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n.footer-information .footer-note {\n  flex-basis: 100%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.github-logo {\n  margin-left: 0.2rem;\n  transition: filter 2s;\n}\n\n.github-logo:hover {\n  cursor: pointer;\n  transform: scale(0.95);\n}\n\n.github-logo:active {\n  cursor: pointer;\n  transform: scale(0.9);\n}\n\n.credits {\n  font-size: 0.6rem;\n}\n\n/*   Sticky Footer    */\n\n.page-wrap {\n  min-height: 100%;\n  margin-bottom: -75px;\n}\n\nfooter,\n.page-wrap:after {\n  height: 75px;\n}\n\n.page-wrap:after {\n  content: "";\n  display: block;\n}\n\n/*   !!!!!!   Media Queries         */\n\n@media (min-width: 768px) {\n  :root {\n    font-size: 25px;\n  }\n  .button {\n    width: 40vw;\n    padding: 0.3rem;\n    height: 100%;\n    font-size: 1rem;\n  }\n}\n\n@media (min-width: 1200px) {\n  :root {\n    font-size: 25px;\n  }\n\n  main {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  #board {\n    margin-left: 2rem;\n    grid-column: 1/2;\n    width: 35vw;\n    height: 35vw;\n  }\n\n  #instruction-result {\n    grid-column: span 2;\n    grid-row: 1;\n  }\n\n  .game-buttons {\n    grid-template-columns: 1fr !important;\n    grid-column: 2;\n    width: 80%;\n    justify-items: flex-start;\n  }\n\n  .button {\n    font-size: 1.5rem;\n    width: 100%;\n    height: 100%;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    max-width: 20rem;\n  }\n}\n',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['@import url("https://fonts.googleapis.com/css2?family=Cabin&display=swap");\n\n* {\n  margin: 0;\n  padding: 0;\n  text-decoration: none;\n  list-style: none;\n  box-sizing: border-box;\n}\n\n:root {\n  font-family: "Cabin", sans-serif;\n  font-size: 15px;\n  --primary: #bc8c4c;\n  --secondary: #e4c46c;\n  --tertiary: #672b15;\n}\n\nbody,\nhtml {\n  background-color: var(--secondary);\n  height: 100%;\n}\n\n/* !!!! Header !!!!*/\nheader {\n  padding-top: 1rem;\n  padding-bottom: 1rem;\n  margin-bottom: 0.5rem;\n  text-align: center;\n}\nh1 {\n  border-bottom: 2px solid var(--tertiary);\n  width: fit-content;\n  display: inline-block;\n  color: var(--primary);\n  text-align: center;\n  letter-spacing: 0.15rem;\n  text-shadow: 0 0 1px black, 0 0 1px black, 0 0 1px black, 0 0 1px black;\n}\n\n/* !!!! Main !!!!*/\nmain {\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n  align-items: center;\n  justify-items: center;\n}\n/*  Board */\n\n#board {\n  margin-top: 1.5rem;\n  grid-column: span 8;\n  width: 80vw;\n  height: 80vw;\n  display: grid;\n  grid-template-rows: repeat(8, 1fr);\n  border: 3px solid var(--tertiary);\n  box-shadow: 0.5rem 0.5rem 1rem rgba(0, 0, 0, 0.6),\n    -0.5rem -0.5rem 1rem rgba(0, 0, 0, 0.6);\n}\n\n.row {\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(8, 1fr);\n}\n\n.board-square {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.5rem;\n}\n\n#board .row:nth-child(even) .board-square:nth-child(even) {\n  background-color: var(--secondary);\n  color: black;\n}\n\n#board .row:nth-child(odd) .board-square:nth-child(odd) {\n  background-color: var(--secondary);\n  color: black;\n}\n\n#board .row:nth-child(even) .board-square:nth-child(odd) {\n  background-color: var(--primary);\n  color: black;\n}\n\n#board .row:nth-child(odd) .board-square:nth-child(even) {\n  background-color: var(--primary);\n  color: black;\n}\n\n.board-icon {\n  width: 80%;\n  height: auto;\n}\n\n/*  Instructions/Result Display  */\n\n#instruction-result {\n  font-size: 1.1rem;\n  padding: 0.5rem 1rem;\n  grid-column: span 8;\n  grid-row: 1;\n  background-color: var(--primary);\n  border: 2px solid var(--tertiary);\n  border-radius: 1rem;\n  width: 85vw;\n}\n\n.hidden {\n  display: none;\n}\n\n/*  Game Buttons*/\n.game-buttons {\n  margin-top: 0.8rem;\n  grid-column: span 8;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 0.5rem;\n  text-align: center;\n  align-items: center;\n  justify-items: center;\n}\n\n.button {\n  width: 30vw;\n  padding: 0.3rem;\n  height: 100%;\n  font-size: 1rem;\n  background-color: var(--primary);\n  border: 2px solid var(--tertiary);\n  border-radius: 0.5rem;\n  transition: background-color 0.6s;\n  color: black;\n  box-shadow: 0.4rem 0.4rem.7rem rgba(0, 0, 0, 0.24);\n}\n\n.button:hover {\n  background-color: var(--secondary);\n  cursor: pointer;\n}\n\n.button:active {\n  transform: scale(0.98);\n}\n\n/*  Footer  */\n\nfooter {\n  margin-top: 1rem;\n  background-color: var(--tertiary);\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nfooter .footer-information {\n  font-size: 1rem;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n.footer-information .footer-note {\n  flex-basis: 100%;\n  text-align: center;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.github-logo {\n  margin-left: 0.2rem;\n  transition: filter 2s;\n}\n\n.github-logo:hover {\n  cursor: pointer;\n  transform: scale(0.95);\n}\n\n.github-logo:active {\n  cursor: pointer;\n  transform: scale(0.9);\n}\n\n.credits {\n  font-size: 0.6rem;\n}\n\n/*   Sticky Footer    */\n\n.page-wrap {\n  min-height: 100%;\n  margin-bottom: -75px;\n}\n\nfooter,\n.page-wrap:after {\n  height: 75px;\n}\n\n.page-wrap:after {\n  content: "";\n  display: block;\n}\n\n/*   !!!!!!   Media Queries         */\n\n@media (min-width: 768px) {\n  :root {\n    font-size: 25px;\n  }\n  .button {\n    width: 40vw;\n    padding: 0.3rem;\n    height: 100%;\n    font-size: 1rem;\n  }\n}\n\n@media (min-width: 1200px) {\n  :root {\n    font-size: 25px;\n  }\n\n  main {\n    grid-template-columns: 1fr 1fr;\n  }\n\n  #board {\n    margin-left: 2rem;\n    grid-column: 1/2;\n    width: 35vw;\n    height: 35vw;\n  }\n\n  #instruction-result {\n    grid-column: span 2;\n    grid-row: 1;\n  }\n\n  .game-buttons {\n    grid-template-columns: 1fr !important;\n    grid-column: 2;\n    width: 80%;\n    justify-items: flex-start;\n  }\n\n  .button {\n    font-size: 1.5rem;\n    width: 100%;\n    height: 100%;\n    padding-top: 1rem;\n    padding-bottom: 1rem;\n    max-width: 20rem;\n  }\n}\n'],sourceRoot:""}]);const s=a},645:n=>{"use strict";n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e="",r=void 0!==t[5];return t[4]&&(e+="@supports (".concat(t[4],") {")),t[2]&&(e+="@media ".concat(t[2]," {")),r&&(e+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),e+=n(t),r&&(e+="}"),t[2]&&(e+="}"),t[4]&&(e+="}"),e})).join("")},t.i=function(n,e,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);r&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:n=>{"use strict";n.exports=function(n){var t=n[1],e=n[3];if(!e)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[t].concat(a).concat([i]).join("\n")}return[t].join("\n")}},307:(n,t,e)=>{n=e.nmd(n);var r="__lodash_hash_undefined__",o=9007199254740991,i="[object Arguments]",a="[object Array]",s="[object Boolean]",c="[object Date]",A="[object Error]",l="[object Function]",u="[object Map]",d="[object Number]",p="[object Object]",f="[object Promise]",h="[object RegExp]",m="[object Set]",g="[object String]",b="[object WeakMap]",v="[object ArrayBuffer]",C="[object DataView]",E=/^\[object .+?Constructor\]$/,y=/^(?:0|[1-9]\d*)$/,B={};B["[object Float32Array]"]=B["[object Float64Array]"]=B["[object Int8Array]"]=B["[object Int16Array]"]=B["[object Int32Array]"]=B["[object Uint8Array]"]=B["[object Uint8ClampedArray]"]=B["[object Uint16Array]"]=B["[object Uint32Array]"]=!0,B[i]=B[a]=B[v]=B[s]=B[C]=B[c]=B[A]=B[l]=B[u]=B[d]=B[p]=B[h]=B[m]=B[g]=B[b]=!1;var w="object"==typeof e.g&&e.g&&e.g.Object===Object&&e.g,_="object"==typeof self&&self&&self.Object===Object&&self,x=w||_||Function("return this")(),k=t&&!t.nodeType&&t,j=k&&n&&!n.nodeType&&n,q=j&&j.exports===k,z=q&&w.process,I=function(){try{return z&&z.binding&&z.binding("util")}catch(n){}}(),S=I&&I.isTypedArray;function L(n,t){for(var e=-1,r=null==n?0:n.length;++e<r;)if(t(n[e],e,n))return!0;return!1}function M(n){var t=-1,e=Array(n.size);return n.forEach((function(n,r){e[++t]=[r,n]})),e}function O(n){var t=-1,e=Array(n.size);return n.forEach((function(n){e[++t]=n})),e}var Y,W,T,P=Array.prototype,U=Function.prototype,F=Object.prototype,$=x["__core-js_shared__"],R=U.toString,D=F.hasOwnProperty,N=(Y=/[^.]+$/.exec($&&$.keys&&$.keys.IE_PROTO||""))?"Symbol(src)_1."+Y:"",X=F.toString,Z=RegExp("^"+R.call(D).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),H=q?x.Buffer:void 0,V=x.Symbol,G=x.Uint8Array,J=F.propertyIsEnumerable,Q=P.splice,K=V?V.toStringTag:void 0,nn=Object.getOwnPropertySymbols,tn=H?H.isBuffer:void 0,en=(W=Object.keys,T=Object,function(n){return W(T(n))}),rn=qn(x,"DataView"),on=qn(x,"Map"),an=qn(x,"Promise"),sn=qn(x,"Set"),cn=qn(x,"WeakMap"),An=qn(Object,"create"),ln=Ln(rn),un=Ln(on),dn=Ln(an),pn=Ln(sn),fn=Ln(cn),hn=V?V.prototype:void 0,mn=hn?hn.valueOf:void 0;function gn(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function bn(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function vn(n){var t=-1,e=null==n?0:n.length;for(this.clear();++t<e;){var r=n[t];this.set(r[0],r[1])}}function Cn(n){var t=-1,e=null==n?0:n.length;for(this.__data__=new vn;++t<e;)this.add(n[t])}function En(n){var t=this.__data__=new bn(n);this.size=t.size}function yn(n,t){for(var e=n.length;e--;)if(Mn(n[e][0],t))return e;return-1}function Bn(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":K&&K in Object(n)?function(n){var t=D.call(n,K),e=n[K];try{n[K]=void 0;var r=!0}catch(n){}var o=X.call(n);return r&&(t?n[K]=e:delete n[K]),o}(n):function(n){return X.call(n)}(n)}function wn(n){return Fn(n)&&Bn(n)==i}function _n(n,t,e,r,o){return n===t||(null==n||null==t||!Fn(n)&&!Fn(t)?n!=n&&t!=t:function(n,t,e,r,o,l){var f=Yn(n),b=Yn(t),E=f?a:In(n),y=b?a:In(t),B=(E=E==i?p:E)==p,w=(y=y==i?p:y)==p,_=E==y;if(_&&Wn(n)){if(!Wn(t))return!1;f=!0,B=!1}if(_&&!B)return l||(l=new En),f||$n(n)?xn(n,t,e,r,o,l):function(n,t,e,r,o,i,a){switch(e){case C:if(n.byteLength!=t.byteLength||n.byteOffset!=t.byteOffset)return!1;n=n.buffer,t=t.buffer;case v:return!(n.byteLength!=t.byteLength||!i(new G(n),new G(t)));case s:case c:case d:return Mn(+n,+t);case A:return n.name==t.name&&n.message==t.message;case h:case g:return n==t+"";case u:var l=M;case m:var p=1&r;if(l||(l=O),n.size!=t.size&&!p)return!1;var f=a.get(n);if(f)return f==t;r|=2,a.set(n,t);var b=xn(l(n),l(t),r,o,i,a);return a.delete(n),b;case"[object Symbol]":if(mn)return mn.call(n)==mn.call(t)}return!1}(n,t,E,e,r,o,l);if(!(1&e)){var x=B&&D.call(n,"__wrapped__"),k=w&&D.call(t,"__wrapped__");if(x||k){var j=x?n.value():n,q=k?t.value():t;return l||(l=new En),o(j,q,e,r,l)}}return!!_&&(l||(l=new En),function(n,t,e,r,o,i){var a=1&e,s=kn(n),c=s.length;if(c!=kn(t).length&&!a)return!1;for(var A=c;A--;){var l=s[A];if(!(a?l in t:D.call(t,l)))return!1}var u=i.get(n);if(u&&i.get(t))return u==t;var d=!0;i.set(n,t),i.set(t,n);for(var p=a;++A<c;){var f=n[l=s[A]],h=t[l];if(r)var m=a?r(h,f,l,t,n,i):r(f,h,l,n,t,i);if(!(void 0===m?f===h||o(f,h,e,r,i):m)){d=!1;break}p||(p="constructor"==l)}if(d&&!p){var g=n.constructor,b=t.constructor;g==b||!("constructor"in n)||!("constructor"in t)||"function"==typeof g&&g instanceof g&&"function"==typeof b&&b instanceof b||(d=!1)}return i.delete(n),i.delete(t),d}(n,t,e,r,o,l))}(n,t,e,r,_n,o))}function xn(n,t,e,r,o,i){var a=1&e,s=n.length,c=t.length;if(s!=c&&!(a&&c>s))return!1;var A=i.get(n);if(A&&i.get(t))return A==t;var l=-1,u=!0,d=2&e?new Cn:void 0;for(i.set(n,t),i.set(t,n);++l<s;){var p=n[l],f=t[l];if(r)var h=a?r(f,p,l,t,n,i):r(p,f,l,n,t,i);if(void 0!==h){if(h)continue;u=!1;break}if(d){if(!L(t,(function(n,t){if(a=t,!d.has(a)&&(p===n||o(p,n,e,r,i)))return d.push(t);var a}))){u=!1;break}}else if(p!==f&&!o(p,f,e,r,i)){u=!1;break}}return i.delete(n),i.delete(t),u}function kn(n){return function(n,t,e){var r=t(n);return Yn(n)?r:function(n,t){for(var e=-1,r=t.length,o=n.length;++e<r;)n[o+e]=t[e];return n}(r,e(n))}(n,Rn,zn)}function jn(n,t){var e,r,o=n.__data__;return("string"==(r=typeof(e=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==e:null===e)?o["string"==typeof t?"string":"hash"]:o.map}function qn(n,t){var e=function(n,t){return null==n?void 0:n[t]}(n,t);return function(n){return!(!Un(n)||function(n){return!!N&&N in n}(n))&&(Tn(n)?Z:E).test(Ln(n))}(e)?e:void 0}gn.prototype.clear=function(){this.__data__=An?An(null):{},this.size=0},gn.prototype.delete=function(n){var t=this.has(n)&&delete this.__data__[n];return this.size-=t?1:0,t},gn.prototype.get=function(n){var t=this.__data__;if(An){var e=t[n];return e===r?void 0:e}return D.call(t,n)?t[n]:void 0},gn.prototype.has=function(n){var t=this.__data__;return An?void 0!==t[n]:D.call(t,n)},gn.prototype.set=function(n,t){var e=this.__data__;return this.size+=this.has(n)?0:1,e[n]=An&&void 0===t?r:t,this},bn.prototype.clear=function(){this.__data__=[],this.size=0},bn.prototype.delete=function(n){var t=this.__data__,e=yn(t,n);return!(e<0||(e==t.length-1?t.pop():Q.call(t,e,1),--this.size,0))},bn.prototype.get=function(n){var t=this.__data__,e=yn(t,n);return e<0?void 0:t[e][1]},bn.prototype.has=function(n){return yn(this.__data__,n)>-1},bn.prototype.set=function(n,t){var e=this.__data__,r=yn(e,n);return r<0?(++this.size,e.push([n,t])):e[r][1]=t,this},vn.prototype.clear=function(){this.size=0,this.__data__={hash:new gn,map:new(on||bn),string:new gn}},vn.prototype.delete=function(n){var t=jn(this,n).delete(n);return this.size-=t?1:0,t},vn.prototype.get=function(n){return jn(this,n).get(n)},vn.prototype.has=function(n){return jn(this,n).has(n)},vn.prototype.set=function(n,t){var e=jn(this,n),r=e.size;return e.set(n,t),this.size+=e.size==r?0:1,this},Cn.prototype.add=Cn.prototype.push=function(n){return this.__data__.set(n,r),this},Cn.prototype.has=function(n){return this.__data__.has(n)},En.prototype.clear=function(){this.__data__=new bn,this.size=0},En.prototype.delete=function(n){var t=this.__data__,e=t.delete(n);return this.size=t.size,e},En.prototype.get=function(n){return this.__data__.get(n)},En.prototype.has=function(n){return this.__data__.has(n)},En.prototype.set=function(n,t){var e=this.__data__;if(e instanceof bn){var r=e.__data__;if(!on||r.length<199)return r.push([n,t]),this.size=++e.size,this;e=this.__data__=new vn(r)}return e.set(n,t),this.size=e.size,this};var zn=nn?function(n){return null==n?[]:(n=Object(n),function(t,e){for(var r=-1,o=null==t?0:t.length,i=0,a=[];++r<o;){var s=t[r];c=s,J.call(n,c)&&(a[i++]=s)}var c;return a}(nn(n)))}:function(){return[]},In=Bn;function Sn(n,t){return!!(t=null==t?o:t)&&("number"==typeof n||y.test(n))&&n>-1&&n%1==0&&n<t}function Ln(n){if(null!=n){try{return R.call(n)}catch(n){}try{return n+""}catch(n){}}return""}function Mn(n,t){return n===t||n!=n&&t!=t}(rn&&In(new rn(new ArrayBuffer(1)))!=C||on&&In(new on)!=u||an&&In(an.resolve())!=f||sn&&In(new sn)!=m||cn&&In(new cn)!=b)&&(In=function(n){var t=Bn(n),e=t==p?n.constructor:void 0,r=e?Ln(e):"";if(r)switch(r){case ln:return C;case un:return u;case dn:return f;case pn:return m;case fn:return b}return t});var On=wn(function(){return arguments}())?wn:function(n){return Fn(n)&&D.call(n,"callee")&&!J.call(n,"callee")},Yn=Array.isArray,Wn=tn||function(){return!1};function Tn(n){if(!Un(n))return!1;var t=Bn(n);return t==l||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Pn(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=o}function Un(n){var t=typeof n;return null!=n&&("object"==t||"function"==t)}function Fn(n){return null!=n&&"object"==typeof n}var $n=S?function(n){return function(t){return n(t)}}(S):function(n){return Fn(n)&&Pn(n.length)&&!!B[Bn(n)]};function Rn(n){return null!=(t=n)&&Pn(t.length)&&!Tn(t)?function(n,t){var e=Yn(n),r=!e&&On(n),o=!e&&!r&&Wn(n),i=!e&&!r&&!o&&$n(n),a=e||r||o||i,s=a?function(n,t){for(var e=-1,r=Array(n);++e<n;)r[e]=t(e);return r}(n.length,String):[],c=s.length;for(var A in n)!t&&!D.call(n,A)||a&&("length"==A||o&&("offset"==A||"parent"==A)||i&&("buffer"==A||"byteLength"==A||"byteOffset"==A)||Sn(A,c))||s.push(A);return s}(n):function(n){if(e=(t=n)&&t.constructor,t!==("function"==typeof e&&e.prototype||F))return en(n);var t,e,r=[];for(var o in Object(n))D.call(n,o)&&"constructor"!=o&&r.push(o);return r}(n);var t}n.exports=function(n,t){return _n(n,t)}},379:n=>{"use strict";var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},a=[],s=0;s<n.length;s++){var c=n[s],A=r.base?c[0]+r.base:c[0],l=i[A]||0,u="".concat(A," ").concat(l);i[A]=l+1;var d=e(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var f=o(p,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function o(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap&&t.supports===n.supports&&t.layer===n.layer)return;e.update(n=t)}else e.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var s=e(i[a]);t[s].references--}for(var c=r(n,o),A=0;A<i.length;A++){var l=e(i[A]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{"use strict";var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{"use strict";n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t,n.options),t}},565:(n,t,e)=>{"use strict";n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{"use strict";n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r="";e.supports&&(r+="@supports (".concat(e.supports,") {")),e.media&&(r+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(r+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),r+=e.css,o&&(r+="}"),e.media&&(r+="}"),e.supports&&(r+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n,t.options)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{"use strict";n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}}},t={};function e(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return n[r](i,i.exports,e),i.loaded=!0,i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),e.nmd=n=>(n.paths=[],n.children||(n.children=[]),n),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0,(()=>{"use strict";var n=e(379),t=e.n(n),r=e(795),o=e.n(r),i=e(569),a=e.n(i),s=e(565),c=e.n(s),A=e(216),l=e.n(A),u=e(589),d=e.n(u),p=e(426),f={};f.styleTagTransform=d(),f.setAttributes=c(),f.insert=a().bind(null,"head"),f.domAPI=o(),f.insertStyleElement=l(),t()(p.Z,f),p.Z&&p.Z.locals&&p.Z.locals;const h=new class{constructor(){this.board=[]}generateBoard(){for(let n=0;n<=7;n+=1){const n=[];for(let t=0;t<=7;t+=1)n.push("");this.board.push(n)}}};h.generateBoard();const m=h,g=document.querySelector("#board");(n=>{let t=7;n.forEach((n=>{let e=0;const r=document.createElement("div");r.classList.add("row"),g.appendChild(r),n.forEach((()=>{const n=document.createElement("div");n.classList.add("board-square"),n.dataset.x=e,e+=1,n.dataset.y=t,r.appendChild(n)})),t-=1}))})(m.board);var b=e(307),v=e.n(b);class C{constructor(n=[1,2],t=null){this.position={move:n,predecessor:null},this.adjacencyList=new Map,this.destination=t}leftUp(n=this.position){const t=[n[0]-1,n[1]+2];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}leftDown(n=this.position){const t=[n[0]-1,n[1]-2];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}rightUp(n=this.position){const t=[n[0]+1,n[1]+2];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}rightDown(n=this.position){const t=[n[0]+1,n[1]-2];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}downRight(n=this.position){const t=[n[0]+2,n[1]-1];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}downLeft(n=this.position){const t=[n[0]-2,n[1]-1];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}upRight(n=this.position){const t=[n[0]+2,n[1]+1];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}upLeft(n=this.position){const t=[n[0]-2,n[1]+1];if(!this.isIllegalMove(t))return{move:t,predecessor:n}}isIllegalMove(n){return n[0]<0||n[0]>7||n[1]<0||n[1]>7}convertStringToPosition(n=String(this.position)){return n.split(",").map((n=>Number(n)))}generateMoves({move:n,predecessor:t},e=this.adjacencyList){let r;Array.isArray(n)&&(r=String(n));let o=[];o.push(this.leftDown(n),this.leftUp(n),this.rightDown(n),this.rightUp(n),this.downLeft(n),this.downRight(n),this.upLeft(n),this.upRight(n)),o=o.filter((n=>void 0!==n)),e.set(r,{predecessor:t,arrayOfMoves:o})}findPath(n=this.destination,t=this.position,e=this.adjacencyList){if(this.isIllegalMove(n))return"Illegal move";if(v()(n,t.move))return"You are already here";const r=[],o={};for(r.push(t),o[t.move]=!0;0!==r.length;){let t=r[0];if(o[t.move]=!0,this.generateMoves(t),e.get(String(t.move)).arrayOfMoves.some((t=>v()(t.move,n))))return o[n]=!0,console.log(o),this.findShortestPath(n);e.get(String(t.move)).arrayOfMoves.forEach((n=>{!0!==o[n.move]&&r.push(n)})),r.shift()}return this}formatPath(n){let t="";return n.forEach(((n,e)=>{const r=`Move ${e}: [${n[0]}, ${n[1]}], `;t+=r})),t.substring(0,t.length-2)+"."}findShortestPath(n=this.destination,t=this.adjacencyList){const e=Array.from(t.keys()).pop(),r=[this.convertStringToPosition(e),n];let o=t.get(e).predecessor;for(;null!==o;)r.unshift(o),o=t.get(String(o)).predecessor;return{message:`You made it in ${r.length-1} move(s)`,pathFormatted:this.formatPath(r),path:r}}}let E=new C([1,2]);console.log(E),console.log(E.findPath([3,6])),console.log(E);const y=C,B=e.p+"ef2e0421fdb4de3f955a.png",w=e.p+"2cb750cc733254f93795.png",_=e.p+"04be58c17b3d5e974442.svg",x=document.getElementById("board"),k=document.querySelector(".instructions"),j=document.querySelector(".result"),q=document.querySelector(".knight-btn"),z=document.querySelector(".destination-btn"),I=document.querySelector(".travail-btn"),S=document.querySelector(".reset-btn"),L=document.querySelector(".github-img");(()=>{let n,t="",e="";const r=n=>{if(n.target.classList.contains("board-square")){const t=n.target;return[Number(t.dataset.x),Number(t.dataset.y)]}},o=n=>{if(!n.target.classList.contains("board-square"))return;const e=r(n);t=e;const o=document.createElement("img");o.src=B,o.classList.add("board-icon"),n.target.appendChild(o)},i=n=>{if(!n.target.classList.contains("board-square"))return;const t=r(n);e=t;const o=document.createElement("img");o.src=w,o.classList.add("board-icon"),n.target.appendChild(o)},a=()=>{x.removeEventListener("click",o),x.removeEventListener("click",i)};q.addEventListener("click",(()=>{Array.isArray(t)||(a(),x.addEventListener("click",o,{once:!0}))})),z.addEventListener("click",(()=>{Array.isArray(e)||(a(),x.addEventListener("click",i,{once:!0}))})),I.addEventListener("click",(()=>{if(!k.classList.contains("hidden")&&""!==t&&""!==e){n=new y(t,e);const r=n.findPath();(({path:n})=>{const t=n.slice(1,n.length-1);t.forEach(((n,t)=>{const e=document.querySelector(`[data-x="${n[0]}"][data-y="${n[1]}"]`);console.log(e),e.innerText=t+1})),console.log(t)})(r),(({message:n,pathFormatted:t})=>{k.classList.add("hidden"),j.classList.remove("hidden"),j.innerText=`${n}. Here's the path: ${t}`})(r)}})),S.addEventListener("click",(()=>{t="",e="",n="",Array.from(document.querySelectorAll(".board-icon")).forEach((n=>n.remove())),Array.from(document.querySelectorAll(".board-square")).forEach((n=>{n.innerText=""})),k.classList.remove("hidden"),j.classList.add("hidden")})),L.src=_})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,